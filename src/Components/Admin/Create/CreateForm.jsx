// CreateForm.jsx

import React, { useState, useRef, useEffect } from 'react';Â 
import { useNavigate, useParams, useLocation } from 'react-router-dom';
// The fa-icons import is correctly removed.
import ConfigView from './ConfigView';
import LayoutView from './LayoutView';
import "../../../Styles/CreateForm/Home.sass"
// IMPORTS for PNG icons
import date from "../../../assets/date.png"
import dropdown from "../../../assets/Dropdown.png"
import file from "../../../assets/fileupload.png"
import long from "../../../assets/longtext.png"
import short from "../../../assets/shorttext.png"
import number from "../../../assets/number.png"
import previewIcon from "../../../assets/Eye.png"

// Input fields available in palette (No Change)
const inputFields = [
Â  Â  { label: "Short Text", icon: short },
Â  Â  { label: "Long Text", icon: long },Â 
Â  Â  { label: "Date Picker", icon: date },Â 
Â  Â  { label: "Dropdown", icon: dropdown },Â 
Â  Â  { label: "File Upload", icon: file },Â 
Â  Â  { label: "Number", icon: number },Â 
];

// Maximum limits (No Change)
const MAX_QUESTIONS = 10;

// Create new field with default values (No Change)
const createNewField = (field) => {
Â  Â  const baseField = {
Â  Â  Â  Â  ...field,
Â  Â  Â  Â  id: Date.now() + Math.random(),
Â  Â  Â  Â  question: "Untitled Question",
Â  Â  Â  Â  description: "",
Â  Â  Â  Â  showDescription: false,
Â  Â  Â  Â  required: false,
Â  Â  };

Â  Â  switch (field.label) {
Â  Â  Â  Â  case "Dropdown":
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  ...baseField,
Â  Â  Â  Â  Â  Â  Â  Â  options: [{ id: 1, value: "Option 1" }, { id: 2, value: "Option 2" }],
Â  Â  Â  Â  Â  Â  Â  Â  selectionType: 'Single Select'Â 
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  case "File Upload":
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  ...baseField,
Â  Â  Â  Â  Â  Â  Â  Â  allowedFormats: ['PDF', 'PNG', 'JPG'],
Â  Â  Â  Â  Â  Â  Â  Â  maxSizeMB: 2,
Â  Â  Â  Â  Â  Â  Â  Â  allowMultiple: falseÂ 
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  case "Date Picker":
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  ...baseField,
Â  Â  Â  Â  Â  Â  Â  Â  dateFormat: 'DD/MM/YYYY'Â 
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  return baseField;
Â  Â  }
};

// --- HELPER FUNCTIONS FOR LOCAL STORAGE (No Change) ---

const getLocalForms = () => {
Â  Â  const formsJson = localStorage.getItem('forms');
Â  Â  return formsJson ? JSON.parse(formsJson) : [];
};

const getFormById = (id) => {
Â  Â  const forms = getLocalForms();
Â  Â  return forms.find(f => f.id.toString() === id.toString());
};

const getCurrentDateString = () => {
Â  Â  return new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
}

const CreateForm = () => {
Â  Â  const { formId: urlFormId } = useParams();
Â  Â  const location = useLocation();

Â  Â  const [currentFormId] = useState(urlFormId || Date.now());Â 
Â  Â Â 
Â  Â  // State initialization
Â  Â  const [view, setView] = useState('config');
Â  Â  const [formName, setFormName] = useState('');Â 
Â  Â  const [formDescription, setFormDescription] = useState('');
Â  Â Â 
Â  Â  const [HeaderName, setHeaderName] = useState('');Â 
Â  Â  const [HeaderDescription, setHeaderDescription] = useState('');
Â  Â  const [formNameError, setFormNameError] = useState(false);Â 

Â  Â  // ðŸŒŸ 1. NEW STATE: Flag to make the component read-only (used for both 'View Form' and 'View Responses')
Â  Â  const [isReadOnly, setIsReadOnly] = useState(false);
Â  Â Â 
Â  Â  const [draggedField, setDraggedField] = useState(null);
Â  Â  const [formFields, setFormFields] = useState([]);
Â  Â  const [dragOverIndex, setDragOverIndex] = useState(null);
Â  Â  const [activeFieldId, setActiveFieldId] = useState(null);

Â  Â  const lastDragOverIndex = useRef(null);
Â  Â  const navigate = useNavigate();

Â  Â  // ðŸŒŸ 2. EFFECT HOOK: Load form data and determine initial view/read-only status
Â  Â  useEffect(() => {
Â  Â  Â  Â  // Check the URL path to determine the mode
Â  Â  Â  Â  const isViewingForm = location.pathname.startsWith('/view-form/');
Â  Â  Â  Â  const isViewingResponses = location.pathname.startsWith('/view-responses/');
Â  Â  Â  Â  const isNewOrDraft = location.pathname.startsWith('/create/');

Â  Â  Â  Â  // Determine read-only status based on the route
Â  Â  Â  Â  const shouldBeReadOnly = isViewingForm || isViewingResponses;
Â  Â  Â  Â  setIsReadOnly(shouldBeReadOnly);

Â  Â  Â  Â  if (urlFormId) {
Â  Â  Â  Â  Â  Â  const existingForm = getFormById(urlFormId);
Â  Â  Â  Â  Â  Â  if (existingForm) {
Â  Â  Â  Â  Â  Â  Â  Â  setFormName(existingForm.title || '');Â 
Â  Â  Â  Â  Â  Â  Â  Â  setFormDescription(existingForm.formDes || '');
Â  Â  Â  Â  Â  Â  Â  Â  setHeaderName(existingForm.HeaderName || existingForm.title || '');
Â  Â  Â  Â  Â  Â  Â  Â  setHeaderDescription(existingForm.HeaderDescription || '');
Â  Â  Â  Â  Â  Â  Â  Â  setFormFields(existingForm.formFields || []);
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  // Set the initial view based on the URL path
Â  Â  Â  Â  Â  Â  Â  Â  setView(isViewingResponses ? 'responses' : 'config');Â 
Â  Â  Â  Â  Â  Â  } else if (isNewOrDraft) {
Â  Â  Â  Â  Â  Â  Â  Â  alert("Form not found. Starting a new form.");
Â  Â  Â  Â  Â  Â  Â  Â  navigate('/create', { replace: true });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  // New form initialization (No Change)
Â  Â  Â  Â  Â  Â  setFormName('');Â 
Â  Â  Â  Â  Â  Â  setHeaderName('');Â 
Â  Â  Â  Â  Â  Â  setFormDescription('');
Â  Â  Â  Â  Â  Â  setHeaderDescription('');
Â  Â  Â  Â  Â  Â  setFormFields([]);
Â  Â  Â  Â  Â  Â  setView('config');
Â  Â  Â  Â  }
Â  Â  }, [urlFormId, navigate, location.pathname]);


Â  Â  const saveFormToLocal = (status) => {
Â  Â  Â  Â  const title = formName.trim() || 'Untitled Form';
Â  Â  Â  Â  const formDes = formDescription.trim() || 'Description';
Â  Â  Â  Â Â 
Â  Â  Â  Â  const newForm = {
Â  Â  Â  Â  Â  Â  id: currentFormId,
Â  Â  Â  Â  Â  Â  title: title,Â 
Â  Â  Â  Â  Â  Â  formDes:formDes,
Â  Â  Â  Â  Â  Â  HeaderName: HeaderName.trim() || title,Â 
Â  Â  Â  Â  Â  Â  status: status,
Â  Â  Â  Â  Â  Â  HeaderDescription: HeaderDescription,
Â  Â  Â  Â  Â  Â  formFields: formFields,Â 
Â  Â  Â  Â  Â  Â  [status === 'published' ? 'publishedBy' : 'createdBy']: 'Current User',Â 
Â  Â  Â  Â  Â  Â  [status === 'published' ? 'publishedDate' : 'createdDate']: getCurrentDateString(),
Â  Â  Â  Â  };

Â  Â  Â  Â  const forms = getLocalForms();
Â  Â  Â  Â  const existingIndex = forms.findIndex(f => f.id.toString() === currentFormId.toString());

Â  Â  Â  Â  if (existingIndex > -1) {
Â  Â  Â  Â  Â  Â  forms[existingIndex] = { ...forms[existingIndex], ...newForm };
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  forms.unshift(newForm);
Â  Â  Â  Â  }

Â  Â  Â  Â  localStorage.setItem('forms', JSON.stringify(forms));
Â  Â  };


Â  Â  const handleSwitchToLayout = () => {
Â  Â  Â  Â  // ðŸŒŸ Allow view switching even if form name is empty when in read-only mode
Â  Â  Â  Â  if (!isReadOnly) {
Â  Â  Â  Â  Â  Â  if (!formName.trim()) {
Â  Â  Â  Â  Â  Â  Â  Â  setFormNameError(true);
Â  Â  Â  Â  Â  Â  Â  Â  alert("Form Name is required to proceed to Layout.");
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  setFormNameError(false);Â 

Â  Â  Â  Â  if (!HeaderName.trim()) {
Â  Â  Â  Â  Â  Â  setHeaderName(formName);
Â  Â  Â  Â  }
Â  Â  Â  Â  if (!HeaderDescription.trim()) {
Â  Â  Â  Â  Â  Â  setHeaderDescription(formDescription);
Â  Â  Â  Â  }

Â  Â  Â  Â  setView('layout');
Â  Â  };
Â  Â Â 
Â  Â  const handleFormNameChange = (value) => {
Â  Â  Â  Â  if (isReadOnly) return; // Prevent change if read-only
Â  Â  Â  Â  setFormName(value);
Â  Â  Â  Â  if (formNameError) {
Â  Â  Â  Â  Â  Â  setFormNameError(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â Â 
Â  Â  const handleSave = () => {
Â  Â  Â  Â  if (isReadOnly) return; // Prevent action if read-only
Â  Â  Â  Â  saveFormToLocal('draft');
Â  Â  Â  Â  console.log(`Form '${formName}' saved as draft!`);
Â  Â  Â  Â  navigate('/');
Â  Â  };

Â  Â  const handlePublish = () => {
Â  Â  Â  Â  if (isReadOnly) return; // Prevent action if read-only
Â  Â  Â  Â  if (formFields.length === 0) {
Â  Â  Â  Â  Â  Â  alert("Please add at least one question before publishing.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  saveFormToLocal('published');
Â  Â  Â  Â  console.log(`Form '${formName}' published!`);
Â  Â  Â  Â  navigate('/');Â 
Â  Â  };

Â  Â  const handlePreview = () => {
Â  Â  Â  Â  if (isReadOnly) return; // Prevent action if read-only
Â  Â  Â  Â  saveFormToLocal('draft');
Â  Â  Â  Â  navigate(`/preview/${currentFormId}`);
Â  Â  };

Â  Â  // The remaining handlers (Drag/Drop/Field Management) should internally check isReadOnly
Â  Â  // or be passed a disabled prop from LayoutView and ConfigView. For the purpose of 
    // keeping this file clean, we assume LayoutView/ConfigView will use the isReadOnly prop
    // passed below.
Â  Â  const handleDragStart = (field) => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  setDraggedField(field);
Â  Â  Â  Â  setActiveFieldId(null);
Â  Â  };

Â  Â  const handleDragEnd = () => {
Â  Â  Â  Â  setDraggedField(null);
Â  Â  Â  Â  setDragOverIndex(null);
Â  Â  Â  Â  lastDragOverIndex.current = null;
Â  Â  };

Â  Â  const handleThrottledDragOver = (index) => {
Â  Â  Â  Â  if (lastDragOverIndex.current !== index) {
Â  Â  Â  Â  Â  Â  setDragOverIndex(index);
Â  Â  Â  Â  Â  Â  lastDragOverIndex.current = index;
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const handleDrop = () => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  if (!draggedField) return;

Â  Â  Â  Â  let newFields = [...formFields];
Â  Â  Â  Â  const existingIndex = newFields.findIndex(f => f.id === draggedField.id);
        
        // ... (rest of drop logic remains the same)
Â  Â  Â  Â  if (existingIndex === -1) {
Â  Â  Â  Â  Â  Â  if (newFields.length < MAX_QUESTIONS) {
Â  Â  Â  Â  Â  Â  Â  Â  const newField = createNewField(draggedField);
Â  Â  Â  Â  Â  Â  Â  Â  const targetIndex = dragOverIndex !== null ? dragOverIndex : newFields.length;
Â  Â  Â  Â  Â  Â  Â  Â  newFields.splice(targetIndex, 0, newField);
Â  Â  Â  Â  Â  Â  Â  Â  setActiveFieldId(newField.id);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  newFields.splice(existingIndex, 1);
Â  Â  Â  Â  Â  Â  const targetIndex = dragOverIndex !== null ? dragOverIndex : newFields.length;
Â  Â  Â  Â  Â  Â  newFields.splice(targetIndex, 0, draggedField);
Â  Â  Â  Â  }

Â  Â  Â  Â  setFormFields(newFields);
Â  Â  Â  Â  handleDragEnd();
Â  Â  };

Â  Â  // ... (Field Management Handlers - Assume internal checks/disabled state in LayoutView)

Â  Â  const handleUpdateField = (id, updates) => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  setFormFields(prev => prev.map(f => f.id === id ? { ...f, ...updates } : f));
Â  Â  };

Â  Â  const handleDeleteField = (id) => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  setFormFields(prev => prev.filter(f => f.id !== id));
Â  Â  Â  Â  if (activeFieldId === id) setActiveFieldId(null);
Â  Â  };
    
    // ... (handleAddOption, handleUpdateOption, handleDeleteOption also need isReadOnly check, 
    // but leaving for brevity as the pattern is clear now)

    const handleAddOption = (fieldId) => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  setFormFields(prevFields => prevFields.map(field => {
Â  Â  Â  Â  Â  Â  if (field.id === fieldId && field.options) {
Â  Â  Â  Â  Â  Â  Â  Â  const newOptionId = field.options.length + 1;
Â  Â  Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...field,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  options: [...field.options, { id: newOptionId, value: `Option ${newOptionId}` }]
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return field;
Â  Â  Â  Â  }));
Â  Â  };

Â  Â  // Handler for updating an existing option value
Â  Â  const handleUpdateOption = (fieldId, optionId, newValue) => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  setFormFields(prevFields => prevFields.map(field => {
Â  Â  Â  Â  Â  Â  if (field.id === fieldId && field.options) {
Â  Â  Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...field,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  options: field.options.map(option => 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  option.id === optionId ? { ...option, value: newValue } : option
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return field;
Â  Â  Â  Â  }));
Â  Â  };

Â  Â  // Handler for deleting an option from a Dropdown field
Â  Â  const handleDeleteOption = (fieldId, optionId) => {
Â  Â  Â  Â  if (isReadOnly) return;
Â  Â  Â  Â  setFormFields(prevFields => prevFields.map(field => {
Â  Â  Â  Â  Â  Â  if (field.id === fieldId && field.options) {
Â  Â  Â  Â  Â  Â  Â  Â  if (field.options.length <= 1) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alert("A Dropdown field must have at least one option.");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return field;
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...field,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  options: field.options.filter(option => option.id !== optionId)
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return field;
Â  Â  Â  Â  }));
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <div className="form-builder-page">
Â  Â  Â  Â  Â  Â  <div className="form-tabs">
Â  Â  Â  Â  Â  Â  Â  Â  <div className={`tab ${view === 'config' ? 'active' : ''}`} onClick={() => setView('config')}>
                    Form Configuration
                </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className={`tab ${view === 'layout' ? 'active' : ''}`} onClick={handleSwitchToLayout}>
                    Form Layout
                </div>
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸŒŸ 3. RESPONSES TAB: Only show if in read-only view mode */}
Â  Â  Â  Â  Â  Â  Â  Â  {isReadOnly && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <divÂ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`tab ${view === 'responses' ? 'active' : ''}`}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setView('responses')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Responses
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {view === 'config' ? (
Â  Â  Â  Â  Â  Â  Â  Â  <ConfigView
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  formName={formName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setFormName={handleFormNameChange}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  formDescription={formDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setFormDescription={setFormDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isError={formNameError}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isReadOnly={isReadOnly} 
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  ) : view === 'layout' ? (
Â  Â  Â  Â  Â  Â  Â  Â  <LayoutView
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  inputFields={inputFields}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  formFields={formFields}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  draggedField={draggedField}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  dragOverIndex={dragOverIndex}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setDragOverIndex={handleThrottledDragOver}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDragStart={handleDragStart}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDragEnd={handleDragEnd}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDrop={handleDrop}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeFieldId={activeFieldId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setActiveFieldId={setActiveFieldId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleUpdateField={handleUpdateField}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDeleteField={handleDeleteField}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleAddOption={handleAddOption}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleUpdateOption={handleUpdateOption}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDeleteOption={handleDeleteOption}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HeaderName={HeaderName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setHeaderName={setHeaderName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HeaderDescription={HeaderDescription}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setHeaderDescription={setHeaderDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isReadOnly={isReadOnly} 
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  ) : ( // Responses View
Â  Â  Â  Â  Â  Â  Â  Â  <div className="responses-view-container">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2>Responses for: {HeaderName || formName || 'Untitled Form'}</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>This is the full-page content area for viewing form responses. (Currently mock content)</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Add your actual ResponseList/Table component here */}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  <div className="form-action-footer">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸŒŸ 4. HIDE ALL ACTIONS IF IN READ-ONLY MODE */}
Â  Â  Â  Â  Â  Â  Â  Â  {!isReadOnly && view === 'layout' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="preview-btn" onClick={handlePreview}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={previewIcon} alt="Preview" className="action-icon" />Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Preview FormÂ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  {!isReadOnly && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <buttonÂ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="save-draft-btn"Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleSave}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Save as draft
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {view === 'config' ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="next-btn" onClick={handleSwitchToLayout} >Next</button>Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="next-btn publish-btn" onClick={handlePublish} disabled={!formName.trim()}>Publish Form</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default CreateForm;