// LayoutView.jsx

import { FaPlusCircle } from 'react-icons/fa';
import React, { useRef } from "react";
import FieldCard from "./FieldCard";
import "../../../Styles/CreateForm/LayoutView.sass"


const LayoutView = ({
Â  Â  inputFields,
Â  Â  formFields,
Â  Â  draggedField,
Â  Â  dragOverIndex,
Â  Â  setDragOverIndex,
Â  Â  handleDragStart,
Â  Â  handleDragEnd,
Â  Â  handleDrop,
Â  Â  activeFieldId,
Â  Â  setActiveFieldId,
Â  Â  handleUpdateField,
Â  Â  handleDeleteField,
Â  Â  handleAddOption,
Â  Â  handleUpdateOption,
Â  Â  handleDeleteOption,
Â  Â  HeaderName,
Â  Â  setHeaderName,
Â  Â  HeaderDescription,
Â  Â  setHeaderDescription,
Â  Â  // ðŸŒŸ UPDATED: Accept the new isReadOnly prop
Â  Â  isReadOnly
}) => {
Â  Â  const lastDragOverIndex = useRef(null);

Â  Â  const handleThrottledDragOver = (index) => {
Â  Â  Â  Â  if (lastDragOverIndex.current !== index) {
Â  Â  Â  Â  Â  Â  setDragOverIndex(index);
Â  Â  Â  Â  Â  Â  lastDragOverIndex.current = index;
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  // The header is active (edit mode) when no field card is active AND we are NOT in read-only mode
Â  Â  const isHeaderActive = activeFieldId === null && !isReadOnly;

Â  Â  // Helper to create a clean CSS class name from the field label (e.g., 'Short Text' -> 'shorttext')
Â  Â  const getFieldClass = (label) => label.toLowerCase().replace(/\s/g, '');

Â  Â  return (
Â  Â  Â  Â  <div className="form-layout-builder">
Â  Â  Â  Â  Â  Â  {/* ðŸŒŸ 1. DISABLE FIELD PALETTE ENTIRELY WHEN READ-ONLY */}
Â  Â  Â  Â  Â  Â   
Â  Â  Â  Â  Â  Â  Â  Â  <div className={`layout-sidebar ${isReadOnly ? 'disabled' : ''}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="sidebar-tabs">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="sidebar-tab active">Input Fields</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="sidebar-tab disabled">UDF Fields</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="field-palette">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {inputFields.map(field => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={field.label}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="field-btn"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  draggable={formFields.length < 10}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDragStart={() => handleDragStart(field)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDragEnd={handleDragEnd}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`icon-bg-wrapper ${getFieldClass(field.label)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={field.icon} alt={field.label} className="field-icon"/>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{field.label}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  

Â  Â  Â  Â  Â  Â  <div className="layout-canvas-wrapper">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="combine">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="header-label">Form Header</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`form-header-card ${isHeaderActive ? 'active' : ''} ${isReadOnly ? 'read-only' : ''}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŒŸ DISABLE CLICKING TO ACTIVATE HEADER WHEN READ-ONLY
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => !isReadOnly && setActiveFieldId(null)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="header-content">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Header Name (Title) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`content-line ${isHeaderActive || isReadOnly ? '' : 'display-view'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isHeaderActive ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Header Name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  maxLength={80}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="header-input-title"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={HeaderName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setHeaderName(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="char-count-header">{HeaderName.length}/80</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="header-display-text header-input-title">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {HeaderName || 'Untitled Form'} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Header Description */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`content-line ${isHeaderActive || isReadOnly ? '' : 'display-view'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isHeaderActive ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Form Description (optional)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="header-input-description"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={HeaderDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setHeaderDescription(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="char-count-header">{HeaderDescription.length}/200</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (HeaderDescription.trim() !== '') && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="header-display-text header-input-description">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {HeaderDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="questions-scroll"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŒŸ DISABLE DRAG/DROP EVENTS WHEN READ-ONLY
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDragOver={!isReadOnly ? (e) => e.preventDefault() : null}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDrop={!isReadOnly ? handleDrop : null}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {formFields.map((field, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <React.Fragment key={field.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {draggedField && draggedField.id !== field.id && dragOverIndex === index && !isReadOnly && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="drag-drop-area placeholder">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaPlusCircle className="drag-icon"/> Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p></p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FieldCard
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  field={field}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  index={index}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeFieldId={activeFieldId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŒŸ Pass down read-only prop to FieldCard
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isReadOnly={isReadOnly}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setActiveFieldId={setActiveFieldId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDragStart={handleDragStart}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDragEnd={handleDragEnd}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  dragOverIndex={dragOverIndex}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setDragOverIndex={handleThrottledDragOver}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleUpdateField={handleUpdateField}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDeleteField={handleDeleteField}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleAddOption={handleAddOption}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleUpdateOption={handleUpdateOption}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDeleteOption={handleDeleteOption}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isPreviewMode={false}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </React.Fragment>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸŒŸ HIDE BOTTOM DROP AREA WHEN READ-ONLY */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {(!isReadOnly) && (draggedField || formFields.length === 0) && formFields.length < 10 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="drag-drop-area empty-state bottom-drop-area"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDragOver={(e) => handleThrottledDragOver(formFields.length)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDrop={(e) => handleDrop(e, formFields.length)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaPlusCircle className="drag-icon"/>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>{formFields.length === 0 ? "Drag fields from the left panel" : "Drop here to add/reorder at the end"}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default LayoutView;